"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from atoma_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class ConfidentialChatCompletionRequestTypedDict(TypedDict):
    r"""Request format for confidential chat completions"""

    ciphertext: str
    r"""The encrypted CreateChatCompletionRequest"""
    client_dh_public_key: str
    r"""Client's DH public key for key exchange"""
    nonce: str
    r"""Nonce used for encryption"""
    plaintext_body_hash: str
    r"""Hash of the plaintext body for verification"""
    salt: str
    r"""Salt used for encryption"""
    stack_small_id: int
    r"""The small ID of the stack"""
    max_tokens: NotRequired[Nullable[int]]
    r"""The maximum number of tokens to generate"""
    stream: NotRequired[Nullable[bool]]
    r"""Whether to stream back partial progress"""


class ConfidentialChatCompletionRequest(BaseModel):
    r"""Request format for confidential chat completions"""

    ciphertext: str
    r"""The encrypted CreateChatCompletionRequest"""

    client_dh_public_key: str
    r"""Client's DH public key for key exchange"""

    nonce: str
    r"""Nonce used for encryption"""

    plaintext_body_hash: str
    r"""Hash of the plaintext body for verification"""

    salt: str
    r"""Salt used for encryption"""

    stack_small_id: int
    r"""The small ID of the stack"""

    max_tokens: OptionalNullable[int] = UNSET
    r"""The maximum number of tokens to generate"""

    stream: OptionalNullable[bool] = UNSET
    r"""Whether to stream back partial progress"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["max_tokens", "stream"]
        nullable_fields = ["max_tokens", "stream"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
